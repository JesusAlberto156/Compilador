// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\0\1\7\1\0\1\10\1\11\1\12\2\13"+
    "\1\14\1\15\1\16\1\15\1\17\1\20\1\21\11\22"+
    "\3\11\1\16\1\11\2\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\23\1\30\4\23\1\31\5\23\1\32\10\23"+
    "\3\0\1\10\1\33\1\0\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\23\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\23\1\13\1\0"+
    "\1\13\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\5\1\4\24\7\4\4\2\0\1\4\13\7\1\10"+
    "\10\7\1\11\12\7\3\4\1\12\1\0\2\3\15\7"+
    "\1\13\21\7\1\14\1\7\1\4\3\0\14\7\1\15"+
    "\1\7\1\16\14\7\1\5\1\0\2\7\1\17\5\7"+
    "\1\0\1\7\1\20\7\7\1\0\5\7\1\21\2\7"+
    "\1\6\11\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\64\0\234\0\64\0\320"+
    "\0\64\0\u0104\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c"+
    "\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
    "\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c"+
    "\0\64\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u016c\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u016c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\64\0\u0d34\0\u016c\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u016c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u016c\0\u13b4\0\u13e8\0\u0ccc\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u016c\0\u16f4\0\u016c"+
    "\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894"+
    "\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u016c\0\u1998\0\u19cc\0\u1a00"+
    "\0\u016c\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u016c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\64\0\u1e44"+
    "\0\u1e78\0\u016c\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\2\7\1\5\1\2\1\12\2\13"+
    "\6\14\1\15\1\14\1\2\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\14\1\24\1\25\1\14\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\14\1\36"+
    "\1\37\2\14\66\0\1\3\61\0\2\40\1\41\1\40"+
    "\1\42\7\40\1\43\47\40\21\0\12\44\1\0\30\44"+
    "\14\0\1\45\66\0\1\46\1\0\2\13\62\0\12\14"+
    "\1\0\30\14\21\0\4\14\1\47\1\14\1\50\3\14"+
    "\1\0\30\14\21\0\12\14\1\0\15\14\1\51\12\14"+
    "\21\0\12\14\1\0\4\14\1\52\11\14\1\53\1\14"+
    "\1\54\2\14\1\55\4\14\21\0\12\14\1\0\1\56"+
    "\15\14\1\57\11\14\21\0\12\14\1\0\4\14\1\60"+
    "\3\14\1\61\5\14\1\62\11\14\21\0\12\14\1\0"+
    "\13\14\1\63\14\14\21\0\12\14\1\0\1\64\22\14"+
    "\1\65\4\14\21\0\12\14\1\0\5\14\1\62\7\14"+
    "\1\66\12\14\21\0\12\14\1\0\16\14\1\67\11\14"+
    "\21\0\12\14\1\0\16\14\1\70\11\14\21\0\12\14"+
    "\1\0\16\14\1\71\11\14\21\0\12\14\1\0\16\14"+
    "\1\72\11\14\21\0\12\14\1\0\20\14\1\73\7\14"+
    "\21\0\12\14\1\0\16\14\1\74\1\14\1\75\7\14"+
    "\21\0\12\14\1\0\4\14\1\76\23\14\21\0\12\14"+
    "\1\0\17\14\1\77\2\14\1\100\2\14\1\101\2\14"+
    "\21\0\12\14\1\0\4\14\1\102\13\14\1\103\7\14"+
    "\21\0\12\14\1\0\1\104\27\14\21\0\12\14\1\0"+
    "\7\14\1\105\20\14\2\40\1\41\1\40\1\42\57\40"+
    "\2\0\1\41\61\0\2\106\1\107\1\106\1\110\7\106"+
    "\1\40\47\106\5\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\111\1\44\1\0\16\44\1\0\30\44\14\0\1\112"+
    "\70\0\2\46\62\0\5\14\1\113\4\14\1\0\30\14"+
    "\21\0\5\14\1\114\4\14\1\0\30\14\21\0\12\14"+
    "\1\0\3\14\1\73\24\14\21\0\12\14\1\0\6\14"+
    "\1\115\21\14\21\0\12\14\1\0\16\14\1\116\11\14"+
    "\21\0\12\14\1\0\4\14\1\117\23\14\21\0\12\14"+
    "\1\0\22\14\1\120\5\14\21\0\12\14\1\0\21\14"+
    "\1\121\6\14\21\0\12\14\1\0\13\14\1\122\1\14"+
    "\1\123\12\14\21\0\12\14\1\0\2\14\1\124\3\14"+
    "\1\125\21\14\21\0\12\14\1\0\21\14\1\126\6\14"+
    "\21\0\12\14\1\0\21\14\1\127\6\14\21\0\12\14"+
    "\1\0\13\14\1\130\14\14\21\0\12\14\1\0\15\14"+
    "\1\131\12\14\21\0\12\14\1\0\22\14\1\132\5\14"+
    "\21\0\12\14\1\0\27\14\1\133\21\0\12\14\1\0"+
    "\16\14\1\134\11\14\21\0\12\14\1\0\22\14\1\135"+
    "\1\14\1\136\3\14\21\0\12\14\1\0\22\14\1\73"+
    "\5\14\21\0\12\14\1\0\20\14\1\137\1\140\6\14"+
    "\21\0\12\14\1\0\10\14\1\141\5\14\1\142\11\14"+
    "\21\0\12\14\1\0\17\14\1\143\2\14\1\144\5\14"+
    "\21\0\12\14\1\0\4\14\1\145\23\14\21\0\12\14"+
    "\1\0\1\146\15\14\1\147\1\14\1\150\7\14\21\0"+
    "\12\14\1\0\10\14\1\151\17\14\21\0\12\14\1\0"+
    "\14\14\1\152\13\14\21\0\12\14\1\0\23\14\1\153"+
    "\4\14\21\0\12\14\1\0\20\14\1\154\7\14\21\0"+
    "\12\14\1\0\10\14\1\155\17\14\2\106\1\107\1\106"+
    "\1\110\7\106\1\156\47\106\14\157\1\160\51\157\1\107"+
    "\11\157\1\160\47\157\14\0\1\112\3\0\1\41\64\0"+
    "\12\14\1\161\30\14\21\0\12\14\1\0\10\14\1\162"+
    "\17\14\21\0\12\14\1\0\13\14\1\163\14\14\21\0"+
    "\12\14\1\0\1\164\27\14\21\0\12\14\1\0\22\14"+
    "\1\165\5\14\21\0\12\14\1\0\4\14\1\62\23\14"+
    "\21\0\12\14\1\0\16\14\1\166\11\14\21\0\12\14"+
    "\1\0\21\14\1\167\6\14\21\0\12\14\1\0\10\14"+
    "\1\170\17\14\21\0\12\14\1\0\20\14\1\171\7\14"+
    "\21\0\12\14\1\0\22\14\1\172\5\14\21\0\12\14"+
    "\1\0\4\14\1\173\23\14\21\0\12\14\1\0\21\14"+
    "\1\153\6\14\21\0\12\14\1\0\2\14\1\174\25\14"+
    "\21\0\12\14\1\0\21\14\1\175\6\14\21\0\12\14"+
    "\1\0\17\14\1\176\10\14\21\0\12\14\1\0\16\14"+
    "\1\177\11\14\21\0\12\14\1\0\4\14\1\200\23\14"+
    "\21\0\12\14\1\0\22\14\1\201\5\14\21\0\12\14"+
    "\1\0\10\14\1\202\17\14\21\0\12\14\1\0\15\14"+
    "\1\203\12\14\21\0\12\14\1\0\26\14\1\204\1\14"+
    "\21\0\12\14\1\0\4\14\1\205\23\14\21\0\12\14"+
    "\1\0\23\14\1\206\4\14\21\0\12\14\1\0\1\207"+
    "\27\14\21\0\12\14\1\0\20\14\1\210\1\14\1\211"+
    "\5\14\21\0\12\14\1\0\17\14\1\200\10\14\21\0"+
    "\12\14\1\0\10\14\1\212\17\14\21\0\12\14\1\0"+
    "\22\14\1\213\5\14\21\0\12\14\1\0\17\14\1\214"+
    "\10\14\21\0\12\14\1\0\4\14\1\215\23\14\21\0"+
    "\12\14\1\0\13\14\1\121\14\14\2\106\1\107\1\106"+
    "\1\110\7\106\1\156\3\106\1\40\43\106\14\157\1\160"+
    "\3\157\1\41\43\157\32\0\1\216\52\0\12\14\1\0"+
    "\15\14\1\176\12\14\21\0\12\14\1\0\4\14\1\217"+
    "\23\14\21\0\12\14\1\0\12\14\1\62\15\14\21\0"+
    "\12\14\1\0\16\14\1\220\11\14\21\0\12\14\1\0"+
    "\20\14\1\221\7\14\21\0\12\14\1\0\22\14\1\154"+
    "\5\14\21\0\12\14\1\0\14\14\1\222\13\14\21\0"+
    "\12\14\1\0\4\14\1\211\23\14\21\0\12\14\1\0"+
    "\1\223\27\14\21\0\12\14\1\0\10\14\1\224\17\14"+
    "\21\0\12\14\1\0\22\14\1\225\5\14\21\0\12\14"+
    "\1\0\22\14\1\226\5\14\21\0\12\14\1\0\20\14"+
    "\1\113\7\14\21\0\12\14\1\227\30\14\21\0\12\14"+
    "\1\0\22\14\1\230\5\14\21\0\12\14\1\0\22\14"+
    "\1\231\5\14\21\0\12\14\1\0\10\14\1\232\17\14"+
    "\21\0\12\14\1\0\1\233\27\14\21\0\12\14\1\0"+
    "\20\14\1\234\7\14\21\0\12\14\1\0\12\14\1\235"+
    "\15\14\21\0\12\14\1\0\22\14\1\200\5\14\21\0"+
    "\12\14\1\0\4\14\1\221\23\14\21\0\12\14\1\0"+
    "\15\14\1\236\12\14\21\0\12\14\1\0\2\14\1\237"+
    "\25\14\21\0\12\14\1\0\4\14\1\240\23\14\30\0"+
    "\1\241\54\0\12\14\1\0\1\242\27\14\21\0\12\14"+
    "\1\0\15\14\1\113\12\14\21\0\12\14\1\0\1\243"+
    "\27\14\21\0\12\14\1\0\15\14\1\244\12\14\21\0"+
    "\12\14\1\0\5\14\1\62\22\14\21\0\12\14\1\0"+
    "\10\14\1\245\17\14\21\0\12\14\1\0\10\14\1\246"+
    "\17\14\22\0\1\247\62\0\12\14\1\0\10\14\1\250"+
    "\17\14\21\0\12\14\1\0\14\14\1\251\13\14\21\0"+
    "\12\14\1\0\22\14\1\62\5\14\21\0\12\14\1\0"+
    "\15\14\1\252\12\14\21\0\12\14\1\0\4\14\1\177"+
    "\23\14\21\0\12\14\1\0\6\14\1\132\21\14\21\0"+
    "\12\14\1\0\7\14\1\62\20\14\21\0\12\14\1\0"+
    "\20\14\1\253\7\14\24\0\1\5\60\0\12\14\1\0"+
    "\15\14\1\132\12\14\21\0\12\14\1\0\13\14\1\132"+
    "\14\14\21\0\12\14\1\0\2\14\1\211\25\14\21\0"+
    "\12\14\1\0\16\14\1\234\11\14\21\0\12\14\1\0"+
    "\2\14\1\254\25\14\21\0\12\14\1\0\16\14\1\255"+
    "\11\14\21\0\12\14\1\0\10\14\1\256\17\14\21\0"+
    "\12\14\1\0\1\257\27\14\21\0\12\14\1\0\12\14"+
    "\1\113\15\14\21\0\12\14\1\0\15\14\1\221\12\14"+
    "\21\0\12\14\1\0\22\14\1\260\5\14\21\0\12\14"+
    "\1\0\22\14\1\261\5\14\21\0\12\14\1\0\27\14"+
    "\1\113\21\0\12\14\1\0\23\14\1\262\4\14\21\0"+
    "\12\14\1\0\20\14\1\263\7\14\21\0\12\14\1\0"+
    "\4\14\1\113\23\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\27\1\1\11\2\1\2\0\43\1\1\11\1\0\44\1"+
    "\3\0\34\1\1\0\10\1\1\0\11\1\1\0\5\1"+
    "\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
            // fall through
          case 18: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 19: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(249, 194, 60));
            }
            // fall through
          case 20: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 21: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(178, 127, 232));
            }
            // fall through
          case 22: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(20, 39, 111));
            }
            // fall through
          case 23: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(231, 119, 46));
            }
            // fall through
          case 24: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(75, 109, 177));
            }
            // fall through
          case 25: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(146, 192, 115));
            }
            // fall through
          case 26: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(87, 35, 100));
            }
            // fall through
          case 27: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(47, 65, 143));
            }
            // fall through
          case 28: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(28, 75, 59));
            }
            // fall through
          case 29: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(165, 187, 232));
            }
            // fall through
          case 30: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(106, 210, 161));
            }
            // fall through
          case 31: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(210, 106, 193));
            }
            // fall through
          case 32: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(255, 95, 109));
            }
            // fall through
          case 33: break;
          case 17:
            { return textColor(yychar, yylength(), new Color(186, 143, 86));
            }
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
