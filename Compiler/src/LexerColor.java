// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\0\1\7\2\10\1\11\1\12\2\13\1\14"+
    "\1\15\1\16\1\15\1\17\1\20\1\21\11\22\3\23"+
    "\1\16\1\23\2\10\1\24\1\25\1\26\1\27\1\30"+
    "\1\24\1\31\4\24\1\32\5\24\1\33\10\24\4\0"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\24\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\24\1\13\1\10\1\13\7\0"+
    "\1\3\33\0\1\10\12\0\1\10\22\0\1\10\u0168\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\1\1\5\2\6"+
    "\1\1\1\6\1\4\2\7\1\1\22\7\4\4\1\1"+
    "\1\0\1\1\1\4\13\7\1\10\10\7\1\11\12\7"+
    "\3\4\1\12\1\1\2\3\15\7\1\13\21\7\1\14"+
    "\1\7\1\4\2\0\1\4\1\0\14\7\1\15\1\7"+
    "\1\16\15\7\1\6\1\0\2\7\1\17\6\7\1\0"+
    "\1\7\1\20\10\7\1\0\6\7\1\21\2\7\1\5"+
    "\1\7\1\22\10\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\65\0\237\0\324\0\u0109"+
    "\0\65\0\324\0\65\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212"+
    "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\65\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u01dd\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u01dd"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\65\0\u0e49\0\u01dd"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u01dd\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u01dd\0\u14e9\0\u151e\0\u0ddf\0\u1553\0\324\0\u1588\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u01dd\0\u1839\0\u01dd\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u01dd\0\u1b1f\0\u1b54\0\u1b89\0\u01dd"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u01dd\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\65\0\u2081\0\u20b6\0\u01dd\0\u20eb\0\u01dd\0\u2120\0\u2155"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\5\1\14\1\15\2\16"+
    "\1\2\6\17\1\20\1\17\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\17\1\30\1\31\1\17\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\17"+
    "\1\42\1\43\2\17\67\0\1\3\62\0\2\44\1\45"+
    "\1\44\1\46\7\44\1\47\50\44\10\0\2\7\2\0"+
    "\1\7\3\0\1\7\56\0\1\50\6\0\2\51\1\0"+
    "\10\51\1\0\30\51\17\0\1\14\55\0\2\7\2\0"+
    "\1\52\3\0\1\7\63\0\1\53\1\0\2\16\63\0"+
    "\2\17\1\0\10\17\1\0\30\17\21\0\2\17\1\0"+
    "\2\17\1\54\1\17\1\55\3\17\1\0\30\17\34\0"+
    "\1\2\51\0\2\17\1\0\10\17\1\0\15\17\1\56"+
    "\12\17\21\0\2\17\1\0\10\17\1\0\4\17\1\57"+
    "\11\17\1\60\1\17\1\61\2\17\1\62\4\17\21\0"+
    "\2\17\1\0\10\17\1\0\1\63\15\17\1\64\11\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\65\3\17"+
    "\1\66\5\17\1\67\11\17\21\0\2\17\1\0\10\17"+
    "\1\0\13\17\1\70\14\17\21\0\2\17\1\0\10\17"+
    "\1\0\1\71\22\17\1\72\4\17\21\0\2\17\1\0"+
    "\10\17\1\0\5\17\1\67\7\17\1\73\12\17\21\0"+
    "\2\17\1\0\10\17\1\0\16\17\1\74\11\17\21\0"+
    "\2\17\1\0\10\17\1\0\16\17\1\75\11\17\21\0"+
    "\2\17\1\0\10\17\1\0\16\17\1\76\11\17\21\0"+
    "\2\17\1\0\10\17\1\0\16\17\1\77\11\17\21\0"+
    "\2\17\1\0\10\17\1\0\20\17\1\100\7\17\21\0"+
    "\2\17\1\0\10\17\1\0\16\17\1\101\1\17\1\102"+
    "\7\17\21\0\2\17\1\0\10\17\1\0\4\17\1\103"+
    "\23\17\21\0\2\17\1\0\10\17\1\0\17\17\1\104"+
    "\2\17\1\105\2\17\1\106\2\17\21\0\2\17\1\0"+
    "\10\17\1\0\4\17\1\107\13\17\1\110\7\17\21\0"+
    "\2\17\1\0\10\17\1\0\1\111\27\17\21\0\2\17"+
    "\1\0\10\17\1\0\7\17\1\112\20\17\2\44\1\45"+
    "\1\44\1\46\60\44\2\0\1\45\62\0\2\113\1\114"+
    "\1\113\1\115\7\113\1\44\50\113\12\0\1\50\57\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\116\1\51\1\0"+
    "\17\51\1\0\30\51\10\0\2\7\2\0\1\117\3\0"+
    "\1\7\65\0\2\53\63\0\2\17\1\0\3\17\1\120"+
    "\4\17\1\0\30\17\21\0\2\17\1\0\3\17\1\121"+
    "\4\17\1\0\30\17\21\0\2\17\1\0\10\17\1\0"+
    "\3\17\1\100\24\17\21\0\2\17\1\0\10\17\1\0"+
    "\6\17\1\122\21\17\21\0\2\17\1\0\10\17\1\0"+
    "\16\17\1\123\11\17\21\0\2\17\1\0\10\17\1\0"+
    "\4\17\1\124\23\17\21\0\2\17\1\0\10\17\1\0"+
    "\22\17\1\125\5\17\21\0\2\17\1\0\10\17\1\0"+
    "\21\17\1\126\6\17\21\0\2\17\1\0\10\17\1\0"+
    "\13\17\1\127\1\17\1\130\12\17\21\0\2\17\1\0"+
    "\10\17\1\0\2\17\1\131\3\17\1\132\21\17\21\0"+
    "\2\17\1\0\10\17\1\0\21\17\1\133\6\17\21\0"+
    "\2\17\1\0\10\17\1\0\21\17\1\134\6\17\21\0"+
    "\2\17\1\0\10\17\1\0\13\17\1\135\14\17\21\0"+
    "\2\17\1\0\10\17\1\0\15\17\1\136\12\17\21\0"+
    "\2\17\1\0\10\17\1\0\22\17\1\137\5\17\21\0"+
    "\2\17\1\0\10\17\1\0\27\17\1\140\21\0\2\17"+
    "\1\0\10\17\1\0\16\17\1\141\11\17\21\0\2\17"+
    "\1\0\10\17\1\0\22\17\1\142\1\17\1\143\3\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\100\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\20\17\1\144\1\145"+
    "\6\17\21\0\2\17\1\0\10\17\1\0\10\17\1\146"+
    "\5\17\1\147\11\17\21\0\2\17\1\0\10\17\1\0"+
    "\17\17\1\150\1\17\1\151\1\152\5\17\21\0\2\17"+
    "\1\0\10\17\1\0\4\17\1\153\23\17\21\0\2\17"+
    "\1\0\10\17\1\0\1\154\17\17\1\155\7\17\21\0"+
    "\2\17\1\0\10\17\1\0\10\17\1\156\17\17\21\0"+
    "\2\17\1\0\10\17\1\0\14\17\1\157\13\17\21\0"+
    "\2\17\1\0\10\17\1\0\23\17\1\160\4\17\21\0"+
    "\2\17\1\0\10\17\1\0\20\17\1\161\7\17\21\0"+
    "\2\17\1\0\10\17\1\0\10\17\1\162\17\17\2\113"+
    "\1\114\1\113\1\115\7\113\1\163\50\113\14\164\1\165"+
    "\52\164\1\114\11\164\1\165\50\164\10\0\2\7\2\0"+
    "\1\117\3\0\1\166\65\0\2\17\1\0\10\17\1\167"+
    "\30\17\21\0\2\17\1\0\10\17\1\0\10\17\1\170"+
    "\17\17\21\0\2\17\1\0\10\17\1\0\13\17\1\171"+
    "\14\17\21\0\2\17\1\0\10\17\1\0\1\172\27\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\173\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\67\23\17"+
    "\21\0\2\17\1\0\10\17\1\0\16\17\1\174\11\17"+
    "\21\0\2\17\1\0\10\17\1\0\21\17\1\175\6\17"+
    "\21\0\2\17\1\0\10\17\1\0\10\17\1\176\17\17"+
    "\21\0\2\17\1\0\10\17\1\0\20\17\1\177\7\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\200\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\201\23\17"+
    "\21\0\2\17\1\0\10\17\1\0\21\17\1\160\6\17"+
    "\21\0\2\17\1\0\10\17\1\0\2\17\1\202\25\17"+
    "\21\0\2\17\1\0\10\17\1\0\21\17\1\203\6\17"+
    "\21\0\2\17\1\0\10\17\1\0\17\17\1\204\10\17"+
    "\21\0\2\17\1\0\10\17\1\0\16\17\1\205\11\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\206\23\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\207\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\10\17\1\210\17\17"+
    "\21\0\2\17\1\0\10\17\1\0\15\17\1\211\12\17"+
    "\21\0\2\17\1\0\10\17\1\0\26\17\1\212\1\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\213\23\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\214\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\23\17\1\215\4\17"+
    "\21\0\2\17\1\0\10\17\1\0\1\216\27\17\21\0"+
    "\2\17\1\0\10\17\1\0\20\17\1\217\1\17\1\220"+
    "\5\17\21\0\2\17\1\0\10\17\1\0\10\17\1\221"+
    "\17\17\21\0\2\17\1\0\10\17\1\0\22\17\1\222"+
    "\5\17\21\0\2\17\1\0\10\17\1\0\17\17\1\223"+
    "\10\17\21\0\2\17\1\0\10\17\1\0\4\17\1\224"+
    "\23\17\21\0\2\17\1\0\10\17\1\0\13\17\1\126"+
    "\14\17\2\113\1\114\1\113\1\115\7\113\1\163\3\113"+
    "\1\44\44\113\14\164\1\165\3\164\1\45\44\164\33\0"+
    "\1\225\52\0\2\17\1\0\10\17\1\0\15\17\1\204"+
    "\12\17\21\0\2\17\1\0\10\17\1\0\4\17\1\226"+
    "\23\17\21\0\2\17\1\0\10\17\1\0\12\17\1\67"+
    "\15\17\21\0\2\17\1\0\10\17\1\0\16\17\1\227"+
    "\11\17\21\0\2\17\1\0\10\17\1\0\20\17\1\230"+
    "\7\17\21\0\2\17\1\0\10\17\1\0\16\17\1\231"+
    "\3\17\1\161\5\17\21\0\2\17\1\0\10\17\1\0"+
    "\14\17\1\232\13\17\21\0\2\17\1\0\10\17\1\0"+
    "\4\17\1\220\23\17\21\0\2\17\1\0\10\17\1\0"+
    "\1\233\27\17\21\0\2\17\1\0\10\17\1\0\10\17"+
    "\1\234\17\17\21\0\2\17\1\0\10\17\1\0\22\17"+
    "\1\235\5\17\21\0\2\17\1\0\10\17\1\0\22\17"+
    "\1\236\5\17\21\0\2\17\1\0\10\17\1\0\20\17"+
    "\1\120\7\17\21\0\2\17\1\0\10\17\1\237\30\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\240\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\241\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\10\17\1\242\17\17"+
    "\21\0\2\17\1\0\10\17\1\0\1\243\27\17\21\0"+
    "\2\17\1\0\10\17\1\0\1\244\27\17\21\0\2\17"+
    "\1\0\10\17\1\0\20\17\1\245\7\17\21\0\2\17"+
    "\1\0\10\17\1\0\12\17\1\246\15\17\21\0\2\17"+
    "\1\0\10\17\1\0\22\17\1\206\5\17\21\0\2\17"+
    "\1\0\10\17\1\0\4\17\1\230\23\17\21\0\2\17"+
    "\1\0\10\17\1\0\15\17\1\247\12\17\21\0\2\17"+
    "\1\0\10\17\1\0\2\17\1\250\25\17\21\0\2\17"+
    "\1\0\10\17\1\0\4\17\1\251\23\17\31\0\1\252"+
    "\54\0\2\17\1\0\10\17\1\0\1\253\27\17\21\0"+
    "\2\17\1\0\10\17\1\0\15\17\1\120\12\17\21\0"+
    "\2\17\1\0\10\17\1\0\13\17\1\254\14\17\21\0"+
    "\2\17\1\0\10\17\1\0\1\255\27\17\21\0\2\17"+
    "\1\0\10\17\1\0\15\17\1\256\12\17\21\0\2\17"+
    "\1\0\10\17\1\0\5\17\1\67\22\17\21\0\2\17"+
    "\1\0\10\17\1\0\10\17\1\257\17\17\21\0\2\17"+
    "\1\0\10\17\1\0\10\17\1\260\17\17\22\0\1\261"+
    "\63\0\2\17\1\0\10\17\1\0\10\17\1\262\17\17"+
    "\21\0\2\17\1\0\10\17\1\0\14\17\1\263\13\17"+
    "\21\0\2\17\1\0\10\17\1\0\22\17\1\67\5\17"+
    "\21\0\2\17\1\0\10\17\1\0\20\17\1\217\7\17"+
    "\21\0\2\17\1\0\10\17\1\0\15\17\1\264\12\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\205\23\17"+
    "\21\0\2\17\1\0\10\17\1\0\6\17\1\137\21\17"+
    "\21\0\2\17\1\0\10\17\1\0\7\17\1\67\20\17"+
    "\21\0\2\17\1\0\10\17\1\0\20\17\1\265\7\17"+
    "\25\0\1\5\60\0\2\17\1\0\10\17\1\0\15\17"+
    "\1\137\12\17\21\0\2\17\1\0\10\17\1\0\4\17"+
    "\1\266\23\17\21\0\2\17\1\0\10\17\1\0\13\17"+
    "\1\137\14\17\21\0\2\17\1\0\10\17\1\0\2\17"+
    "\1\220\25\17\21\0\2\17\1\0\10\17\1\0\16\17"+
    "\1\245\11\17\21\0\2\17\1\0\10\17\1\0\2\17"+
    "\1\267\25\17\21\0\2\17\1\0\10\17\1\0\16\17"+
    "\1\270\11\17\21\0\2\17\1\0\10\17\1\0\10\17"+
    "\1\271\17\17\21\0\2\17\1\0\10\17\1\0\1\272"+
    "\27\17\21\0\2\17\1\0\10\17\1\0\12\17\1\120"+
    "\15\17\21\0\2\17\1\0\10\17\1\0\15\17\1\230"+
    "\12\17\21\0\2\17\1\0\10\17\1\0\22\17\1\273"+
    "\5\17\21\0\2\17\1\0\10\17\1\0\22\17\1\274"+
    "\5\17\21\0\2\17\1\0\10\17\1\0\27\17\1\120"+
    "\21\0\2\17\1\0\10\17\1\0\23\17\1\275\4\17"+
    "\21\0\2\17\1\0\10\17\1\0\20\17\1\276\7\17"+
    "\21\0\2\17\1\0\10\17\1\0\4\17\1\120\23\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\31\1\1\11\3\1\1\0\44\1\1\11\45\1\2\0"+
    "\1\1\1\0\35\1\1\0\11\1\1\0\12\1\1\0"+
    "\6\1\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return textColor(yychar, yylength(), new Color(183, 36, 57));
            }
            // fall through
          case 19: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 20: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(249, 194, 60));
            }
            // fall through
          case 21: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 22: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(20, 39, 111));
            }
            // fall through
          case 23: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(178, 127, 232));
            }
            // fall through
          case 24: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(231, 119, 46));
            }
            // fall through
          case 25: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(75, 109, 177));
            }
            // fall through
          case 26: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(146, 192, 115));
            }
            // fall through
          case 27: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(87, 35, 100));
            }
            // fall through
          case 28: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(47, 65, 143));
            }
            // fall through
          case 29: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(28, 75, 59));
            }
            // fall through
          case 30: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(165, 187, 232));
            }
            // fall through
          case 31: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(106, 210, 161));
            }
            // fall through
          case 32: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(210, 106, 193));
            }
            // fall through
          case 33: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(255, 95, 109));
            }
            // fall through
          case 34: break;
          case 17:
            { return textColor(yychar, yylength(), new Color(186, 143, 86));
            }
            // fall through
          case 35: break;
          case 18:
            { return textColor(yychar, yylength(), new Color(0, 235, 255));
            }
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
