// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\0\1\7\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\33\1\11"+
    "\1\10\1\34\1\35\1\36\2\10\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\4\44\1\46\5\44\1\47"+
    "\10\44\4\0\1\50\1\0\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\44\1\62\1\63"+
    "\1\64\1\65\1\66\1\44\1\67\1\70\1\71\1\72"+
    "\1\73\1\44\1\74\1\75\1\44\1\76\1\10\1\77"+
    "\7\0\1\3\33\0\1\10\12\0\1\10\22\0\1\10"+
    "\u0168\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\20\22\1\24\1\25"+
    "\2\2\1\5\3\0\1\26\1\27\15\22\1\30\6\22"+
    "\1\31\10\22\3\2\1\32\1\0\1\33\1\34\1\35"+
    "\1\36\14\22\1\37\4\22\1\40\13\22\1\41\1\2"+
    "\3\0\3\22\1\42\5\22\1\43\3\22\1\44\1\22"+
    "\1\45\12\22\1\46\1\47\1\0\1\50\3\22\1\51"+
    "\2\22\1\52\1\22\1\53\2\22\1\54\1\22\1\0"+
    "\1\55\3\22\1\56\1\57\2\22\1\0\1\22\1\60"+
    "\2\22\1\61\4\22\4\0\2\22\1\62\1\63\1\22"+
    "\1\64\1\65\1\66\1\67\2\22\1\70\1\22\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\22\1\125\1\22\1\126\1\127"+
    "\3\22\1\130\1\131\2\22\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\100\0\300\0\u0100\0\u0140"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\u0180"+
    "\0\u01c0\0\u0200\0\100\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\100"+
    "\0\100\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\100"+
    "\0\100\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0280\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0280\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\100\0\u1040\0\u0880\0\u0280\0\u1080\0\u0280\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u1340\0\u1380\0\u0280\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u0280\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u0280\0\u1780\0\u0fc0\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u0280\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u0280\0\u1a40\0\u1a80\0\u1ac0\0\u0280\0\u1b00"+
    "\0\u0280\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u0280\0\u0280\0\u1dc0\0\u0280\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u0280\0\u1ec0\0\u1f00\0\u0280\0\u1f40\0\u0280"+
    "\0\u1f80\0\u1fc0\0\u0280\0\u2000\0\u2040\0\u0280\0\u2080\0\u20c0"+
    "\0\u2100\0\u0280\0\u0280\0\u2140\0\u2180\0\u21c0\0\u2200\0\u0280"+
    "\0\u2240\0\u2280\0\u0280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u0280\0\u0280\0\u2540"+
    "\0\100\0\u0280\0\u0280\0\u0280\0\u2580\0\u25c0\0\u0280\0\u2600"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u2640\0\u0280\0\u2680\0\u0280"+
    "\0\u0280\0\u26c0\0\u2700\0\u2740\0\u0280\0\u0280\0\u2780\0\u27c0"+
    "\0\u0280";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\11\21\1\22\1\23\1\24\7\25\1\26"+
    "\1\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\2\25\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\25\1\47\2\25\1\50\1\51\102\0"+
    "\1\3\75\0\2\52\1\3\1\52\1\4\10\52\1\53"+
    "\62\52\10\0\1\7\101\0\1\54\10\0\11\55\3\0"+
    "\11\55\1\0\25\55\17\0\1\56\103\0\1\57\1\0"+
    "\11\21\101\0\1\60\77\0\1\61\65\0\11\25\3\0"+
    "\11\25\1\0\25\25\25\0\11\25\3\0\2\25\1\62"+
    "\1\25\1\63\4\25\1\0\25\25\52\0\1\27\52\0"+
    "\11\25\3\0\11\25\1\0\13\25\1\64\11\25\25\0"+
    "\11\25\3\0\11\25\1\0\4\25\1\65\7\25\1\66"+
    "\4\25\1\67\3\25\25\0\11\25\3\0\11\25\1\0"+
    "\1\70\13\25\1\71\10\25\25\0\11\25\3\0\11\25"+
    "\1\0\4\25\1\72\3\25\1\73\14\25\25\0\11\25"+
    "\3\0\11\25\1\0\11\25\1\74\13\25\25\0\11\25"+
    "\3\0\11\25\1\0\1\75\20\25\1\76\3\25\25\0"+
    "\11\25\3\0\11\25\1\0\5\25\1\77\5\25\1\100"+
    "\11\25\25\0\11\25\3\0\11\25\1\0\10\25\1\101"+
    "\3\25\1\102\10\25\25\0\11\25\3\0\11\25\1\0"+
    "\14\25\1\103\10\25\25\0\11\25\3\0\11\25\1\0"+
    "\14\25\1\104\10\25\25\0\11\25\3\0\11\25\1\0"+
    "\15\25\1\105\1\106\6\25\25\0\11\25\3\0\11\25"+
    "\1\0\14\25\1\107\1\25\1\110\6\25\25\0\11\25"+
    "\3\0\11\25\1\0\4\25\1\111\20\25\25\0\11\25"+
    "\3\0\11\25\1\0\20\25\1\112\4\25\25\0\11\25"+
    "\3\0\11\25\1\0\4\25\1\113\3\25\1\114\5\25"+
    "\1\115\6\25\25\0\11\25\3\0\11\25\1\0\1\116"+
    "\24\25\2\0\2\52\1\3\1\52\1\4\73\52\2\117"+
    "\1\120\1\117\1\121\10\117\1\52\62\117\12\0\1\54"+
    "\72\0\1\55\1\0\1\55\1\0\1\55\1\122\2\55"+
    "\1\0\62\55\15\0\1\123\105\0\11\124\67\0\11\25"+
    "\3\0\3\25\1\125\5\25\1\0\25\25\25\0\11\25"+
    "\3\0\3\25\1\126\5\25\1\0\25\25\25\0\11\25"+
    "\3\0\11\25\1\0\3\25\1\127\21\25\25\0\11\25"+
    "\3\0\11\25\1\0\6\25\1\130\16\25\25\0\11\25"+
    "\3\0\11\25\1\0\14\25\1\131\10\25\25\0\11\25"+
    "\3\0\11\25\1\0\20\25\1\132\4\25\25\0\11\25"+
    "\3\0\11\25\1\0\11\25\1\133\13\25\25\0\11\25"+
    "\3\0\11\25\1\0\13\25\1\134\11\25\25\0\11\25"+
    "\3\0\11\25\1\0\2\25\1\135\3\25\1\136\2\25"+
    "\1\137\13\25\25\0\11\25\3\0\11\25\1\0\17\25"+
    "\1\140\5\25\25\0\11\25\3\0\11\25\1\0\17\25"+
    "\1\141\5\25\25\0\11\25\3\0\11\25\1\0\11\25"+
    "\1\142\13\25\25\0\11\25\3\0\11\25\1\0\13\25"+
    "\1\143\11\25\25\0\11\25\3\0\11\25\1\0\20\25"+
    "\1\144\4\25\25\0\11\25\3\0\11\25\1\0\6\25"+
    "\1\145\16\25\25\0\11\25\3\0\11\25\1\0\14\25"+
    "\1\146\10\25\25\0\11\25\3\0\11\25\1\0\20\25"+
    "\1\147\1\25\1\150\2\25\25\0\11\25\3\0\11\25"+
    "\1\0\20\25\1\151\4\25\25\0\11\25\3\0\11\25"+
    "\1\0\4\25\1\152\20\25\25\0\11\25\3\0\11\25"+
    "\1\0\16\25\1\153\6\25\25\0\11\25\3\0\11\25"+
    "\1\0\10\25\1\154\3\25\1\155\10\25\25\0\11\25"+
    "\3\0\11\25\1\0\17\25\1\156\1\157\4\25\25\0"+
    "\11\25\3\0\11\25\1\0\1\160\15\25\1\161\6\25"+
    "\25\0\11\25\3\0\11\25\1\0\12\25\1\162\12\25"+
    "\25\0\11\25\3\0\11\25\1\0\12\25\1\163\12\25"+
    "\25\0\11\25\3\0\11\25\1\0\21\25\1\164\3\25"+
    "\25\0\11\25\3\0\11\25\1\0\16\25\1\165\6\25"+
    "\2\0\2\117\1\120\1\117\1\121\10\117\1\166\62\117"+
    "\15\167\1\170\64\167\1\120\12\167\1\170\62\167\15\0"+
    "\1\123\4\0\1\3\100\0\11\25\3\0\11\25\1\171"+
    "\25\25\25\0\11\25\3\0\11\25\1\0\10\25\1\172"+
    "\14\25\25\0\11\25\3\0\11\25\1\0\11\25\1\173"+
    "\13\25\25\0\11\25\3\0\11\25\1\0\20\25\1\174"+
    "\4\25\25\0\11\25\3\0\11\25\1\0\11\25\1\175"+
    "\13\25\25\0\11\25\3\0\11\25\1\0\17\25\1\176"+
    "\5\25\25\0\11\25\3\0\11\25\1\0\10\25\1\177"+
    "\14\25\25\0\11\25\3\0\11\25\1\0\16\25\1\200"+
    "\6\25\25\0\11\25\3\0\11\25\1\0\1\201\24\25"+
    "\25\0\11\25\3\0\11\25\1\0\20\25\1\202\4\25"+
    "\25\0\11\25\3\0\11\25\1\0\4\25\1\203\20\25"+
    "\25\0\11\25\3\0\11\25\1\0\17\25\1\204\5\25"+
    "\25\0\11\25\3\0\11\25\1\0\2\25\1\205\22\25"+
    "\25\0\11\25\3\0\11\25\1\0\20\25\1\206\4\25"+
    "\25\0\11\25\3\0\11\25\1\0\15\25\1\207\7\25"+
    "\25\0\11\25\3\0\11\25\1\0\14\25\1\210\10\25"+
    "\25\0\11\25\3\0\11\25\1\0\4\25\1\211\20\25"+
    "\25\0\11\25\3\0\11\25\1\0\16\25\1\212\6\25"+
    "\25\0\11\25\3\0\11\25\1\0\20\25\1\213\4\25"+
    "\25\0\11\25\3\0\11\25\1\0\13\25\1\214\11\25"+
    "\25\0\11\25\3\0\11\25\1\0\23\25\1\215\1\25"+
    "\25\0\11\25\3\0\11\25\1\0\20\25\1\216\4\25"+
    "\25\0\11\25\3\0\11\25\1\0\21\25\1\217\3\25"+
    "\25\0\11\25\3\0\11\25\1\0\16\25\1\220\1\25"+
    "\1\221\4\25\25\0\11\25\3\0\11\25\1\0\10\25"+
    "\1\222\14\25\25\0\11\25\3\0\11\25\1\0\15\25"+
    "\1\223\7\25\25\0\11\25\3\0\11\25\1\0\4\25"+
    "\1\224\20\25\25\0\11\25\3\0\11\25\1\0\4\25"+
    "\1\225\20\25\2\0\2\117\1\120\1\117\1\121\10\117"+
    "\1\166\4\117\1\52\55\117\15\167\1\170\4\167\1\3"+
    "\55\167\47\0\1\226\53\0\11\25\3\0\11\25\1\0"+
    "\13\25\1\227\11\25\25\0\11\25\3\0\11\25\1\0"+
    "\4\25\1\230\20\25\25\0\11\25\3\0\11\25\1\0"+
    "\14\25\1\231\10\25\25\0\11\25\3\0\11\25\1\0"+
    "\14\25\1\232\3\25\1\233\4\25\25\0\11\25\3\0"+
    "\11\25\1\0\12\25\1\234\12\25\25\0\11\25\3\0"+
    "\11\25\1\0\4\25\1\235\20\25\25\0\11\25\3\0"+
    "\11\25\1\0\24\25\1\236\25\0\11\25\3\0\11\25"+
    "\1\0\1\237\24\25\25\0\11\25\3\0\11\25\1\0"+
    "\4\25\1\240\20\25\25\0\11\25\3\0\11\25\1\0"+
    "\20\25\1\241\4\25\25\0\11\25\3\0\11\25\1\0"+
    "\7\25\1\242\15\25\25\0\11\25\3\0\11\25\1\0"+
    "\16\25\1\243\6\25\25\0\11\25\3\0\11\25\1\0"+
    "\1\244\24\25\25\0\11\25\3\0\11\25\1\245\25\25"+
    "\25\0\11\25\3\0\11\25\1\0\20\25\1\246\4\25"+
    "\25\0\11\25\3\0\11\25\1\0\10\25\1\247\14\25"+
    "\25\0\11\25\3\0\11\25\1\0\1\250\24\25\25\0"+
    "\11\25\3\0\11\25\1\0\16\25\1\251\6\25\25\0"+
    "\11\25\3\0\11\25\1\0\20\25\1\252\4\25\25\0"+
    "\11\25\3\0\11\25\1\0\4\25\1\253\20\25\25\0"+
    "\11\25\3\0\11\25\1\0\13\25\1\254\11\25\25\0"+
    "\11\25\3\0\11\25\1\0\4\25\1\255\20\25\47\0"+
    "\1\256\55\0\11\25\3\0\11\25\1\0\1\257\24\25"+
    "\25\0\11\25\3\0\11\25\1\0\13\25\1\260\11\25"+
    "\25\0\11\25\3\0\11\25\1\0\11\25\1\261\13\25"+
    "\25\0\11\25\3\0\11\25\1\0\1\262\24\25\25\0"+
    "\11\25\3\0\11\25\1\0\4\25\1\263\20\25\25\0"+
    "\11\25\3\0\11\25\1\0\13\25\1\264\11\25\25\0"+
    "\11\25\3\0\11\25\1\0\10\25\1\265\14\25\25\0"+
    "\11\25\3\0\11\25\1\0\4\25\1\266\20\25\25\0"+
    "\11\25\3\0\11\25\1\0\20\25\1\267\4\25\41\0"+
    "\1\270\1\271\1\272\1\273\60\0\11\25\3\0\11\25"+
    "\1\0\12\25\1\274\12\25\25\0\11\25\3\0\11\25"+
    "\1\0\16\25\1\275\6\25\25\0\11\25\3\0\11\25"+
    "\1\0\13\25\1\276\11\25\25\0\11\25\3\0\11\25"+
    "\1\0\6\25\1\277\16\25\25\0\11\25\3\0\11\25"+
    "\1\0\16\25\1\300\6\25\42\0\1\301\62\0\11\25"+
    "\3\0\11\25\1\0\13\25\1\302\11\25\25\0\11\25"+
    "\3\0\11\25\1\0\4\25\1\303\20\25\25\0\11\25"+
    "\3\0\11\25\1\0\11\25\1\304\13\25\25\0\11\25"+
    "\3\0\11\25\1\0\2\25\1\305\22\25\25\0\11\25"+
    "\3\0\11\25\1\0\14\25\1\306\10\25\25\0\11\25"+
    "\3\0\11\25\1\0\16\25\1\307\6\25\25\0\11\25"+
    "\3\0\11\25\1\0\10\25\1\310\14\25\25\0\1\311"+
    "\1\312\1\313\1\314\1\315\1\316\72\0\1\317\1\320"+
    "\1\321\1\322\1\323\1\324\1\325\1\326\72\0\1\327"+
    "\1\330\1\331\1\332\1\333\1\334\70\0\1\335\1\336"+
    "\1\337\1\340\1\341\1\342\1\343\1\344\70\0\11\25"+
    "\3\0\11\25\1\0\10\25\1\345\14\25\25\0\11\25"+
    "\3\0\11\25\1\0\20\25\1\346\4\25\25\0\11\25"+
    "\3\0\11\25\1\0\1\347\24\25\25\0\11\25\3\0"+
    "\11\25\1\0\4\25\1\350\20\25\25\0\11\25\3\0"+
    "\11\25\1\0\13\25\1\351\11\25\25\0\11\25\3\0"+
    "\11\25\1\0\14\25\1\352\10\25\25\0\11\25\3\0"+
    "\11\25\1\0\20\25\1\353\4\25\25\0\11\25\3\0"+
    "\11\25\1\0\20\25\1\354\4\25\25\0\11\25\3\0"+
    "\11\25\1\0\13\25\1\355\11\25\25\0\11\25\3\0"+
    "\11\25\1\0\24\25\1\356\25\0\11\25\3\0\11\25"+
    "\1\0\21\25\1\357\3\25\25\0\11\25\3\0\11\25"+
    "\1\0\16\25\1\360\6\25\25\0\11\25\3\0\11\25"+
    "\1\0\4\25\1\361\20\25\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\3\1\7\11\3\1\1\11"+
    "\24\1\2\11\3\1\3\0\2\11\40\1\1\11\1\0"+
    "\43\1\3\0\34\1\1\0\16\1\1\0\10\1\1\0"+
    "\11\1\4\0\5\1\1\11\7\1\34\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_X", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 92: break;
          case 3:
            { return token(yytext(), "FIN_DE_LINEA", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 4:
            { return token(yytext(), "ERROR_0", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 5:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 6:
            { return token(yytext(), "L_PARENT", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 7:
            { return token(yytext(), "R_PARENT", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 8:
            { return token(yytext(), "OP_ARITMETICO_MULTI", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 9:
            { return token(yytext(), "OP_ARITMETICO_SUMA", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 10:
            { return token(yytext(), "SIGNO_PUNTUACION_COMA", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 11:
            { return token(yytext(), "OP_ARITMETICO_RESTA", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 12:
            { return token(yytext(), "SIGNO_PUNTUACION_PUNTO", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          case 13:
            { return token(yytext(), "OP_ARITMETICO_DIV", yyline, yycolumn);
            }
            // fall through
          case 103: break;
          case 14:
            { return token(yytext(), "VALOR_NUMERO_ENTERO", yyline, yycolumn);
            }
            // fall through
          case 104: break;
          case 15:
            { return token(yytext(), "OP_RELACIONAL_MENOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 105: break;
          case 16:
            { return token(yytext(), "OP_ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 106: break;
          case 17:
            { return token(yytext(), "OP_RELACIONAL_MAYOR_QUE", yyline, yycolumn);
            }
            // fall through
          case 107: break;
          case 18:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 108: break;
          case 19:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 109: break;
          case 20:
            { return token(yytext(), "L_LLAVE", yyline, yycolumn);
            }
            // fall through
          case 110: break;
          case 21:
            { return token(yytext(), "R_LLAVE", yyline, yycolumn);
            }
            // fall through
          case 111: break;
          case 22:
            { return token(yytext(), "OP_RELACIONAL_MENOR_IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 112: break;
          case 23:
            { return token(yytext(), "OP_RELACIONAL_MAYOR_IGUAL_QUE", yyline, yycolumn);
            }
            // fall through
          case 113: break;
          case 24:
            { return token(yytext(), "ESTRUCTURA_DE_CONTROL_I", yyline, yycolumn);
            }
            // fall through
          case 114: break;
          case 25:
            { return token(yytext(), "OP_LOGICO_OR", yyline, yycolumn);
            }
            // fall through
          case 115: break;
          case 26:
            { return token(yytext(), "VALOR_CADENA", yyline, yycolumn);
            }
            // fall through
          case 116: break;
          case 27:
            { return token(yytext(), "VALOR_NUMERO_REAL", yyline, yycolumn);
            }
            // fall through
          case 117: break;
          case 28:
            { return token(yytext(), "TIPO_PUERTO_LCD", yyline, yycolumn);
            }
            // fall through
          case 118: break;
          case 29:
            { return token(yytext(), "TIPO_PUERTO_LED", yyline, yycolumn);
            }
            // fall through
          case 119: break;
          case 30:
            { return token(yytext(), "OP_LOGICO_AND", yyline, yycolumn);
            }
            // fall through
          case 120: break;
          case 31:
            { return token(yytext(), "TIPO_DATO_I", yyline, yycolumn);
            }
            // fall through
          case 121: break;
          case 32:
            { return token(yytext(), "OP_LOGICO_NOT", yyline, yycolumn);
            }
            // fall through
          case 122: break;
          case 33:
            { return token(yytext(), "DECLARACION_V", yyline, yycolumn);
            }
            // fall through
          case 123: break;
          case 34:
            { return token(yytext(), "METODO_CALL", yyline, yycolumn);
            }
            // fall through
          case 124: break;
          case 35:
            { return token(yytext(), "ESTRUCTURA_DE_CONTROL_E", yyline, yycolumn);
            }
            // fall through
          case 125: break;
          case 36:
            { return token(yytext(), "ESTRUCTURA_DE_CONTROL_L", yyline, yycolumn);
            }
            // fall through
          case 126: break;
          case 37:
            { return token(yytext(), "MOTOR_M", yyline, yycolumn);
            }
            // fall through
          case 127: break;
          case 38:
            { return token(yytext(), "METODO_SENSOR_TIME", yyline, yycolumn);
            }
            // fall through
          case 128: break;
          case 39:
            { return token(yytext(), "VALOR_CONDICIONAL_T", yyline, yycolumn);
            }
            // fall through
          case 129: break;
          case 40:
            { return token(yytext(), "ESTRUCTURA_DE_CONTROL_B", yyline, yycolumn);
            }
            // fall through
          case 130: break;
          case 41:
            { return token(yytext(), "DECLARACION_C", yyline, yycolumn);
            }
            // fall through
          case 131: break;
          case 42:
            { return token(yytext(), "METODO_D", yyline, yycolumn);
            }
            // fall through
          case 132: break;
          case 43:
            { return token(yytext(), "VALOR_CONDICIONAL_F", yyline, yycolumn);
            }
            // fall through
          case 133: break;
          case 44:
            { return token(yytext(), "TIPO_PUERTO_MOTOR", yyline, yycolumn);
            }
            // fall through
          case 134: break;
          case 45:
            { return token(yytext(), "METODO_P", yyline, yycolumn);
            }
            // fall through
          case 135: break;
          case 46:
            { return token(yytext(), "MOTOR_S", yyline, yycolumn);
            }
            // fall through
          case 136: break;
          case 47:
            { return token(yytext(), "METODO_SENSOR_STATE", yyline, yycolumn);
            }
            // fall through
          case 137: break;
          case 48:
            { return token(yytext(), "TIPO_PUERTO_BUTTON", yyline, yycolumn);
            }
            // fall through
          case 138: break;
          case 49:
            { return token(yytext(), "METODO_SENSOR_DEGREE", yyline, yycolumn);
            }
            // fall through
          case 139: break;
          case 50:
            { return token(yytext(), "METODO_R", yyline, yycolumn);
            }
            // fall through
          case 140: break;
          case 51:
            { return token(yytext(), "TIPO_DATO_S", yyline, yycolumn);
            }
            // fall through
          case 141: break;
          case 52:
            { return token(yytext(), "TIPO_PUERTO_LED_RGB", yyline, yycolumn);
            }
            // fall through
          case 142: break;
          case 53:
            { return token(yytext(), "TIPO_DATO_B", yyline, yycolumn);
            }
            // fall through
          case 143: break;
          case 54:
            { return token(yytext(), "METODO_C", yyline, yycolumn);
            }
            // fall through
          case 144: break;
          case 55:
            { return token(yytext(), "TIPO_DATO_D", yyline, yycolumn);
            }
            // fall through
          case 145: break;
          case 56:
            { return token(yytext(), "METODO_L", yyline, yycolumn);
            }
            // fall through
          case 146: break;
          case 57:
            { return token(yytext(), "PUERTO_A0", yyline, yycolumn);
            }
            // fall through
          case 147: break;
          case 58:
            { return token(yytext(), "PUERTO_A1", yyline, yycolumn);
            }
            // fall through
          case 148: break;
          case 59:
            { return token(yytext(), "PUERTO_A2", yyline, yycolumn);
            }
            // fall through
          case 149: break;
          case 60:
            { return token(yytext(), "PUERTO_A3", yyline, yycolumn);
            }
            // fall through
          case 150: break;
          case 61:
            { return token(yytext(), "PUERTO_A4", yyline, yycolumn);
            }
            // fall through
          case 151: break;
          case 62:
            { return token(yytext(), "PUERTO_A5", yyline, yycolumn);
            }
            // fall through
          case 152: break;
          case 63:
            { return token(yytext(), "PUERTO_B0", yyline, yycolumn);
            }
            // fall through
          case 153: break;
          case 64:
            { return token(yytext(), "PUERTO_B1", yyline, yycolumn);
            }
            // fall through
          case 154: break;
          case 65:
            { return token(yytext(), "PUERTO_B2", yyline, yycolumn);
            }
            // fall through
          case 155: break;
          case 66:
            { return token(yytext(), "PUERTO_B3", yyline, yycolumn);
            }
            // fall through
          case 156: break;
          case 67:
            { return token(yytext(), "PUERTO_B4", yyline, yycolumn);
            }
            // fall through
          case 157: break;
          case 68:
            { return token(yytext(), "PUERTO_B5", yyline, yycolumn);
            }
            // fall through
          case 158: break;
          case 69:
            { return token(yytext(), "PUERTO_B6", yyline, yycolumn);
            }
            // fall through
          case 159: break;
          case 70:
            { return token(yytext(), "PUERTO_B7", yyline, yycolumn);
            }
            // fall through
          case 160: break;
          case 71:
            { return token(yytext(), "PUERTO_C2", yyline, yycolumn);
            }
            // fall through
          case 161: break;
          case 72:
            { return token(yytext(), "PUERTO_C3", yyline, yycolumn);
            }
            // fall through
          case 162: break;
          case 73:
            { return token(yytext(), "PUERTO_C4", yyline, yycolumn);
            }
            // fall through
          case 163: break;
          case 74:
            { return token(yytext(), "PUERTO_C5", yyline, yycolumn);
            }
            // fall through
          case 164: break;
          case 75:
            { return token(yytext(), "PUERTO_C6", yyline, yycolumn);
            }
            // fall through
          case 165: break;
          case 76:
            { return token(yytext(), "PUERTO_C7", yyline, yycolumn);
            }
            // fall through
          case 166: break;
          case 77:
            { return token(yytext(), "PUERTO_D0", yyline, yycolumn);
            }
            // fall through
          case 167: break;
          case 78:
            { return token(yytext(), "PUERTO_D1", yyline, yycolumn);
            }
            // fall through
          case 168: break;
          case 79:
            { return token(yytext(), "PUERTO_D2", yyline, yycolumn);
            }
            // fall through
          case 169: break;
          case 80:
            { return token(yytext(), "PUERTO_D3", yyline, yycolumn);
            }
            // fall through
          case 170: break;
          case 81:
            { return token(yytext(), "PUERTO_D4", yyline, yycolumn);
            }
            // fall through
          case 171: break;
          case 82:
            { return token(yytext(), "PUERTO_D5", yyline, yycolumn);
            }
            // fall through
          case 172: break;
          case 83:
            { return token(yytext(), "PUERTO_D6", yyline, yycolumn);
            }
            // fall through
          case 173: break;
          case 84:
            { return token(yytext(), "PUERTO_D7", yyline, yycolumn);
            }
            // fall through
          case 174: break;
          case 85:
            { return token(yytext(), "MOTOR_R", yyline, yycolumn);
            }
            // fall through
          case 175: break;
          case 86:
            { return token(yytext(), "METODO_SENSOR_DISTANCE", yyline, yycolumn);
            }
            // fall through
          case 176: break;
          case 87:
            { return token(yytext(), "ESTRUCTURA_DE_CONTROL_F", yyline, yycolumn);
            }
            // fall through
          case 177: break;
          case 88:
            { return token(yytext(), "METODO_O", yyline, yycolumn);
            }
            // fall through
          case 178: break;
          case 89:
            { return token(yytext(), "TIPO_PUERTO_PROXIMITY", yyline, yycolumn);
            }
            // fall through
          case 179: break;
          case 90:
            { return token(yytext(), "TIPO_PUERTO_TEMPERATURE", yyline, yycolumn);
            }
            // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
