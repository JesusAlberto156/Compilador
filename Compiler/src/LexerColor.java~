// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\0\1\7\2\10\1\11\1\12\2\13\1\14"+
    "\1\15\1\16\1\15\1\17\1\20\2\21\4\22\2\23"+
    "\2\24\3\25\1\16\1\25\2\10\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\4\33\1\35\5\33\1\36"+
    "\10\33\4\0\1\37\1\0\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\33\1\51\1\52"+
    "\1\53\1\54\1\55\1\33\1\56\1\57\1\60\1\61"+
    "\1\62\1\33\1\63\1\64\1\33\1\13\1\10\1\13"+
    "\7\0\1\3\33\0\1\10\12\0\1\10\22\0\1\10"+
    "\u0168\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\3\7\1\4\2\10\1\1\20\10\4\4\1\1"+
    "\1\0\1\1\1\4\15\10\1\11\6\10\1\12\10\10"+
    "\3\4\1\13\1\1\2\3\14\10\1\14\17\10\1\15"+
    "\1\4\2\0\1\4\1\0\3\10\1\16\7\10\1\17"+
    "\1\10\1\20\11\10\1\21\1\7\1\0\10\10\1\0"+
    "\5\10\1\0\7\10\3\0\1\10\1\6\1\10\1\22"+
    "\1\10\1\23\7\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\65\0\237\0\324\0\65"+
    "\0\u0109\0\65\0\324\0\65\0\u013e\0\u0173\0\u01a8\0\u01dd"+
    "\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385"+
    "\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\65\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u01a8\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u01a8\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\65\0\u0d40\0\u01a8\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u01a8\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u01a8\0\u1341\0\u0cd6\0\u1376\0\324\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u01a8\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u01a8\0\u15f2\0\u01a8\0\u1627\0\u165c\0\u1691"+
    "\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u01a8\0\u01a8"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\u01a8\0\u1d9b\0\u01a8\0\u1dd0\0\65"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\5\1\15\4\16"+
    "\1\2\7\17\1\20\1\17\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\17\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\17\1\41\2\17"+
    "\67\0\1\3\62\0\2\42\1\43\1\42\1\44\7\42"+
    "\1\45\50\42\10\0\1\7\3\0\1\7\3\0\1\7"+
    "\56\0\1\46\6\0\4\47\1\0\11\47\1\0\25\47"+
    "\10\0\1\7\3\0\1\50\3\0\1\7\63\0\1\51"+
    "\1\0\4\16\61\0\4\17\1\0\11\17\1\0\25\17"+
    "\21\0\4\17\1\0\2\17\1\52\1\17\1\53\4\17"+
    "\1\0\25\17\37\0\1\2\46\0\4\17\1\0\11\17"+
    "\1\0\13\17\1\54\11\17\21\0\4\17\1\0\11\17"+
    "\1\0\4\17\1\55\7\17\1\56\4\17\1\57\3\17"+
    "\21\0\4\17\1\0\11\17\1\0\1\60\13\17\1\61"+
    "\10\17\21\0\4\17\1\0\11\17\1\0\4\17\1\62"+
    "\3\17\1\63\14\17\21\0\4\17\1\0\11\17\1\0"+
    "\11\17\1\64\13\17\21\0\4\17\1\0\11\17\1\0"+
    "\1\65\20\17\1\66\3\17\21\0\4\17\1\0\11\17"+
    "\1\0\5\17\1\67\5\17\1\70\11\17\21\0\4\17"+
    "\1\0\11\17\1\0\10\17\1\71\3\17\1\72\10\17"+
    "\21\0\4\17\1\0\11\17\1\0\14\17\1\73\10\17"+
    "\21\0\4\17\1\0\11\17\1\0\14\17\1\74\10\17"+
    "\21\0\4\17\1\0\11\17\1\0\15\17\1\75\1\76"+
    "\6\17\21\0\4\17\1\0\11\17\1\0\14\17\1\77"+
    "\1\17\1\100\6\17\21\0\4\17\1\0\11\17\1\0"+
    "\4\17\1\101\20\17\21\0\4\17\1\0\11\17\1\0"+
    "\20\17\1\102\4\17\21\0\4\17\1\0\11\17\1\0"+
    "\4\17\1\103\3\17\1\104\5\17\1\105\6\17\21\0"+
    "\4\17\1\0\11\17\1\0\1\106\24\17\2\42\1\43"+
    "\1\42\1\44\60\42\2\0\1\43\62\0\2\107\1\110"+
    "\1\107\1\111\7\107\1\42\50\107\12\0\1\46\57\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\112\1\47\1\0"+
    "\22\47\1\0\25\47\10\0\1\7\3\0\1\113\3\0"+
    "\1\7\65\0\4\51\61\0\4\17\1\0\3\17\1\114"+
    "\5\17\1\0\25\17\21\0\4\17\1\0\3\17\1\115"+
    "\5\17\1\0\25\17\21\0\4\17\1\0\11\17\1\0"+
    "\3\17\1\76\21\17\21\0\4\17\1\0\11\17\1\0"+
    "\6\17\1\116\16\17\21\0\4\17\1\0\11\17\1\0"+
    "\14\17\1\117\10\17\21\0\4\17\1\0\11\17\1\0"+
    "\20\17\1\120\4\17\21\0\4\17\1\0\11\17\1\0"+
    "\11\17\1\121\13\17\21\0\4\17\1\0\11\17\1\0"+
    "\13\17\1\122\11\17\21\0\4\17\1\0\11\17\1\0"+
    "\2\17\1\123\3\17\1\124\2\17\1\125\13\17\21\0"+
    "\4\17\1\0\11\17\1\0\17\17\1\126\5\17\21\0"+
    "\4\17\1\0\11\17\1\0\17\17\1\127\5\17\21\0"+
    "\4\17\1\0\11\17\1\0\11\17\1\130\13\17\21\0"+
    "\4\17\1\0\11\17\1\0\13\17\1\131\11\17\21\0"+
    "\4\17\1\0\11\17\1\0\20\17\1\132\4\17\21\0"+
    "\4\17\1\0\11\17\1\0\6\17\1\133\16\17\21\0"+
    "\4\17\1\0\11\17\1\0\14\17\1\134\10\17\21\0"+
    "\4\17\1\0\11\17\1\0\20\17\1\135\1\17\1\136"+
    "\2\17\21\0\4\17\1\0\11\17\1\0\20\17\1\76"+
    "\4\17\21\0\4\17\1\0\11\17\1\0\4\17\1\137"+
    "\20\17\21\0\4\17\1\0\11\17\1\0\16\17\1\140"+
    "\6\17\21\0\4\17\1\0\11\17\1\0\10\17\1\141"+
    "\3\17\1\142\10\17\21\0\4\17\1\0\11\17\1\0"+
    "\17\17\1\143\1\144\4\17\21\0\4\17\1\0\11\17"+
    "\1\0\1\145\15\17\1\146\6\17\21\0\4\17\1\0"+
    "\11\17\1\0\12\17\1\147\12\17\21\0\4\17\1\0"+
    "\11\17\1\0\12\17\1\150\12\17\21\0\4\17\1\0"+
    "\11\17\1\0\21\17\1\151\3\17\21\0\4\17\1\0"+
    "\11\17\1\0\16\17\1\152\6\17\2\107\1\110\1\107"+
    "\1\111\7\107\1\153\50\107\14\154\1\155\52\154\1\110"+
    "\11\154\1\155\50\154\10\0\1\7\3\0\1\113\3\0"+
    "\1\156\65\0\4\17\1\0\11\17\1\157\25\17\21\0"+
    "\4\17\1\0\11\17\1\0\10\17\1\160\14\17\21\0"+
    "\4\17\1\0\11\17\1\0\11\17\1\161\13\17\21\0"+
    "\4\17\1\0\11\17\1\0\20\17\1\162\4\17\21\0"+
    "\4\17\1\0\11\17\1\0\11\17\1\163\13\17\21\0"+
    "\4\17\1\0\11\17\1\0\17\17\1\164\5\17\21\0"+
    "\4\17\1\0\11\17\1\0\10\17\1\165\14\17\21\0"+
    "\4\17\1\0\11\17\1\0\16\17\1\166\6\17\21\0"+
    "\4\17\1\0\11\17\1\0\1\167\24\17\21\0\4\17"+
    "\1\0\11\17\1\0\20\17\1\170\4\17\21\0\4\17"+
    "\1\0\11\17\1\0\4\17\1\67\20\17\21\0\4\17"+
    "\1\0\11\17\1\0\17\17\1\151\5\17\21\0\4\17"+
    "\1\0\11\17\1\0\2\17\1\171\22\17\21\0\4\17"+
    "\1\0\11\17\1\0\20\17\1\172\4\17\21\0\4\17"+
    "\1\0\11\17\1\0\15\17\1\173\7\17\21\0\4\17"+
    "\1\0\11\17\1\0\14\17\1\174\10\17\21\0\4\17"+
    "\1\0\11\17\1\0\4\17\1\175\20\17\21\0\4\17"+
    "\1\0\11\17\1\0\16\17\1\176\6\17\21\0\4\17"+
    "\1\0\11\17\1\0\20\17\1\177\4\17\21\0\4\17"+
    "\1\0\11\17\1\0\13\17\1\200\11\17\21\0\4\17"+
    "\1\0\11\17\1\0\23\17\1\201\1\17\21\0\4\17"+
    "\1\0\11\17\1\0\20\17\1\202\4\17\21\0\4\17"+
    "\1\0\11\17\1\0\21\17\1\203\3\17\21\0\4\17"+
    "\1\0\11\17\1\0\16\17\1\204\1\17\1\150\4\17"+
    "\21\0\4\17\1\0\11\17\1\0\10\17\1\205\14\17"+
    "\21\0\4\17\1\0\11\17\1\0\15\17\1\206\7\17"+
    "\21\0\4\17\1\0\11\17\1\0\4\17\1\207\20\17"+
    "\21\0\4\17\1\0\11\17\1\0\4\17\1\210\20\17"+
    "\2\107\1\110\1\107\1\111\7\107\1\153\3\107\1\42"+
    "\44\107\14\154\1\155\3\154\1\43\44\154\36\0\1\211"+
    "\47\0\4\17\1\0\11\17\1\0\13\17\1\173\11\17"+
    "\21\0\4\17\1\0\11\17\1\0\4\17\1\212\20\17"+
    "\21\0\4\17\1\0\11\17\1\0\14\17\1\213\10\17"+
    "\21\0\4\17\1\0\11\17\1\0\14\17\1\214\3\17"+
    "\1\152\4\17\21\0\4\17\1\0\11\17\1\0\12\17"+
    "\1\215\12\17\21\0\4\17\1\0\11\17\1\0\4\17"+
    "\1\150\20\17\21\0\4\17\1\0\11\17\1\0\24\17"+
    "\1\163\21\0\4\17\1\0\11\17\1\0\1\216\24\17"+
    "\21\0\4\17\1\0\11\17\1\0\20\17\1\217\4\17"+
    "\21\0\4\17\1\0\11\17\1\0\7\17\1\220\15\17"+
    "\21\0\4\17\1\0\11\17\1\0\16\17\1\114\6\17"+
    "\21\0\4\17\1\0\11\17\1\0\1\221\24\17\21\0"+
    "\4\17\1\0\11\17\1\222\25\17\21\0\4\17\1\0"+
    "\11\17\1\0\20\17\1\163\4\17\21\0\4\17\1\0"+
    "\11\17\1\0\10\17\1\223\14\17\21\0\4\17\1\0"+
    "\11\17\1\0\1\224\24\17\21\0\4\17\1\0\11\17"+
    "\1\0\16\17\1\225\6\17\21\0\4\17\1\0\11\17"+
    "\1\0\20\17\1\175\4\17\21\0\4\17\1\0\11\17"+
    "\1\0\13\17\1\226\11\17\21\0\4\17\1\0\11\17"+
    "\1\0\4\17\1\227\20\17\34\0\1\230\51\0\4\17"+
    "\1\0\11\17\1\0\1\231\24\17\21\0\4\17\1\0"+
    "\11\17\1\0\13\17\1\114\11\17\21\0\4\17\1\0"+
    "\11\17\1\0\11\17\1\232\13\17\21\0\4\17\1\0"+
    "\11\17\1\0\1\233\24\17\21\0\4\17\1\0\11\17"+
    "\1\0\13\17\1\234\11\17\21\0\4\17\1\0\11\17"+
    "\1\0\10\17\1\235\14\17\21\0\4\17\1\0\11\17"+
    "\1\0\4\17\1\236\20\17\21\0\4\17\1\0\11\17"+
    "\1\0\20\17\1\237\4\17\26\0\1\240\1\241\1\242"+
    "\1\241\54\0\4\17\1\0\11\17\1\0\12\17\1\243"+
    "\12\17\21\0\4\17\1\0\11\17\1\0\16\17\1\204"+
    "\6\17\21\0\4\17\1\0\11\17\1\0\13\17\1\244"+
    "\11\17\21\0\4\17\1\0\11\17\1\0\6\17\1\132"+
    "\16\17\21\0\4\17\1\0\11\17\1\0\16\17\1\245"+
    "\6\17\27\0\1\5\56\0\4\17\1\0\11\17\1\0"+
    "\13\17\1\132\11\17\21\0\4\17\1\0\11\17\1\0"+
    "\4\17\1\246\20\17\21\0\4\17\1\0\11\17\1\0"+
    "\11\17\1\132\13\17\21\0\4\17\1\0\11\17\1\0"+
    "\2\17\1\150\22\17\21\0\4\17\1\0\11\17\1\0"+
    "\14\17\1\225\10\17\21\0\4\17\1\0\11\17\1\0"+
    "\16\17\1\163\6\17\21\0\4\17\1\0\11\17\1\0"+
    "\10\17\1\247\14\17\21\0\2\250\63\0\3\250\63\0"+
    "\2\250\62\0\4\17\1\0\11\17\1\0\10\17\1\251"+
    "\14\17\21\0\4\17\1\0\11\17\1\0\1\252\24\17"+
    "\21\0\4\17\1\0\11\17\1\0\14\17\1\253\10\17"+
    "\21\0\4\17\1\0\11\17\1\0\20\17\1\254\4\17"+
    "\21\0\4\17\1\0\11\17\1\0\20\17\1\255\4\17"+
    "\21\0\4\17\1\0\11\17\1\0\13\17\1\163\11\17"+
    "\21\0\4\17\1\0\11\17\1\0\24\17\1\114\21\0"+
    "\4\17\1\0\11\17\1\0\21\17\1\256\3\17\21\0"+
    "\4\17\1\0\11\17\1\0\16\17\1\257\6\17\21\0"+
    "\4\17\1\0\11\17\1\0\4\17\1\114\20\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\26\1\1\11\3\1\1\0\42\1\1\11"+
    "\41\1\2\0\1\1\1\0\31\1\1\0\10\1\1\0"+
    "\5\1\1\0\7\1\3\0\5\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return textColor(yychar, yylength(), new Color(183, 36, 57));
            }
            // fall through
          case 20: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 21: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(249, 194, 60));
            }
            // fall through
          case 22: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 23: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(0, 0, 0));
            }
            // fall through
          case 24: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(20, 39, 111));
            }
            // fall through
          case 25: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(178, 127, 232));
            }
            // fall through
          case 26: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(231, 119, 46));
            }
            // fall through
          case 27: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(75, 109, 177));
            }
            // fall through
          case 28: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(146, 192, 115));
            }
            // fall through
          case 29: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(87, 35, 100));
            }
            // fall through
          case 30: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(47, 65, 143));
            }
            // fall through
          case 31: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(28, 75, 59));
            }
            // fall through
          case 32: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(255, 95, 109));
            }
            // fall through
          case 33: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(165, 187, 232));
            }
            // fall through
          case 34: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(106, 210, 161));
            }
            // fall through
          case 35: break;
          case 17:
            { return textColor(yychar, yylength(), new Color(210, 106, 193));
            }
            // fall through
          case 36: break;
          case 18:
            { return textColor(yychar, yylength(), new Color(0, 235, 255));
            }
            // fall through
          case 37: break;
          case 19:
            { return textColor(yychar, yylength(), new Color(186, 143, 86));
            }
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
