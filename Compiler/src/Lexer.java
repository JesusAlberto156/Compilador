// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\0\1\7\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\11\24"+
    "\1\25\1\10\1\26\1\27\1\26\2\10\1\30\1\31"+
    "\1\32\1\33\1\34\1\30\1\35\4\30\1\36\5\30"+
    "\1\37\10\30\4\0\1\40\1\0\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\30\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\30\1\71"+
    "\1\10\1\72\7\0\1\3\33\0\1\10\12\0\1\10"+
    "\22\0\1\10\u0168\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\1\22\21\1\22\1\23\2\2"+
    "\1\5\3\0\1\17\2\21\1\24\11\21\1\25\3\21"+
    "\1\26\5\21\1\27\12\21\3\2\1\30\1\0\1\31"+
    "\2\32\1\33\15\21\1\34\4\21\1\35\15\21\1\36"+
    "\1\21\1\2\3\0\4\21\1\37\11\21\1\40\1\21"+
    "\1\41\15\21\1\42\1\21\1\0\1\43\1\21\1\44"+
    "\1\21\1\45\1\21\1\46\3\21\1\47\2\21\1\0"+
    "\1\21\1\50\5\21\1\51\3\21\1\52\1\0\4\21"+
    "\1\53\2\21\1\54\2\21\1\55\1\21\1\56\1\57"+
    "\1\21\1\32\1\60\4\21\1\61\1\21\1\62\4\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\73\0\261\0\354\0\u0127"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\u0162"+
    "\0\u019d\0\u01d8\0\73\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\73\0\73\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\73\0\u084c\0\u0887\0\73\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0213\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0213\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0213"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\73\0\u0fac\0\u0811"+
    "\0\u0213\0\u0fe7\0\u0213\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u0213\0\u1321\0\u135c\0\u1397\0\u13d2\0\u0213\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u0213\0\u170c\0\u1747\0\u0f36\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u0213\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u0213"+
    "\0\u1af7\0\u0213\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u0213"+
    "\0\u1e31\0\u1e6c\0\u0213\0\u1ea7\0\u0213\0\u1ee2\0\u0213\0\u1f1d"+
    "\0\u0213\0\u1f58\0\u1f93\0\u1fce\0\u0213\0\u2009\0\u2044\0\u207f"+
    "\0\u20ba\0\u0213\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u0213"+
    "\0\u221c\0\u2257\0\u2292\0\u0213\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u0213\0\u23f4\0\u242f\0\73\0\u246a\0\u24a5\0\u0213"+
    "\0\u24e0\0\u0213\0\u0213\0\u251b\0\73\0\u0213\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u0213\0\u2642\0\u0213\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\2\1\22\1\23\6\24\1\25\1\24"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\2\24"+
    "\1\35\1\36\1\24\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\24\1\47\1\50\2\24\1\51"+
    "\1\52\75\0\1\3\70\0\2\53\1\3\1\53\1\4"+
    "\10\53\1\54\55\53\10\0\2\7\73\0\1\55\10\0"+
    "\2\56\3\0\10\56\1\0\30\56\17\0\1\57\76\0"+
    "\1\60\1\0\2\21\75\0\1\61\66\0\2\24\3\0"+
    "\10\24\1\0\30\24\25\0\2\24\3\0\2\24\1\62"+
    "\1\24\1\63\3\24\1\0\30\24\42\0\1\64\55\0"+
    "\2\24\3\0\10\24\1\0\15\24\1\65\12\24\25\0"+
    "\2\24\3\0\10\24\1\0\4\24\1\66\11\24\1\67"+
    "\1\24\1\70\2\24\1\71\4\24\25\0\2\24\3\0"+
    "\10\24\1\0\1\72\15\24\1\73\11\24\25\0\2\24"+
    "\3\0\10\24\1\0\4\24\1\74\3\24\1\75\5\24"+
    "\1\76\11\24\25\0\2\24\3\0\10\24\1\0\13\24"+
    "\1\77\14\24\25\0\2\24\3\0\10\24\1\0\1\100"+
    "\22\24\1\101\4\24\25\0\2\24\3\0\10\24\1\0"+
    "\5\24\1\102\7\24\1\103\12\24\25\0\2\24\3\0"+
    "\10\24\1\0\16\24\1\104\11\24\25\0\2\24\3\0"+
    "\10\24\1\0\16\24\1\105\11\24\25\0\2\24\3\0"+
    "\10\24\1\0\16\24\1\106\11\24\25\0\2\24\3\0"+
    "\10\24\1\0\16\24\1\107\11\24\25\0\2\24\3\0"+
    "\10\24\1\0\20\24\1\110\7\24\25\0\2\24\3\0"+
    "\10\24\1\0\16\24\1\111\1\24\1\112\7\24\25\0"+
    "\2\24\3\0\10\24\1\0\4\24\1\113\23\24\25\0"+
    "\2\24\3\0\10\24\1\0\17\24\1\114\2\24\1\115"+
    "\2\24\1\116\2\24\25\0\2\24\3\0\10\24\1\0"+
    "\4\24\1\117\13\24\1\120\7\24\25\0\2\24\3\0"+
    "\10\24\1\0\1\121\27\24\25\0\2\24\3\0\10\24"+
    "\1\0\7\24\1\122\20\24\2\0\2\53\1\3\1\53"+
    "\1\4\66\53\2\123\1\124\1\123\1\125\10\123\1\53"+
    "\55\123\12\0\1\55\65\0\1\56\1\0\1\56\1\0"+
    "\1\56\1\126\2\56\1\0\22\56\1\0\32\56\15\0"+
    "\1\127\100\0\2\130\71\0\2\24\3\0\3\24\1\131"+
    "\4\24\1\0\30\24\25\0\2\24\3\0\3\24\1\132"+
    "\4\24\1\0\30\24\25\0\2\24\3\0\10\24\1\0"+
    "\3\24\1\133\24\24\25\0\2\24\3\0\10\24\1\0"+
    "\6\24\1\134\21\24\25\0\2\24\3\0\10\24\1\0"+
    "\16\24\1\135\11\24\25\0\2\24\3\0\10\24\1\0"+
    "\4\24\1\136\23\24\25\0\2\24\3\0\10\24\1\0"+
    "\22\24\1\137\5\24\25\0\2\24\3\0\10\24\1\0"+
    "\21\24\1\140\6\24\25\0\2\24\3\0\10\24\1\0"+
    "\13\24\1\141\1\24\1\142\12\24\25\0\2\24\3\0"+
    "\10\24\1\0\2\24\1\143\3\24\1\144\21\24\25\0"+
    "\2\24\3\0\10\24\1\0\21\24\1\145\6\24\25\0"+
    "\2\24\3\0\10\24\1\0\21\24\1\146\6\24\25\0"+
    "\2\24\3\0\10\24\1\0\13\24\1\147\14\24\25\0"+
    "\2\24\3\0\10\24\1\0\15\24\1\150\12\24\25\0"+
    "\2\24\3\0\10\24\1\0\22\24\1\151\5\24\25\0"+
    "\2\24\3\0\10\24\1\0\27\24\1\152\25\0\2\24"+
    "\3\0\10\24\1\0\16\24\1\153\11\24\25\0\2\24"+
    "\3\0\10\24\1\0\22\24\1\154\1\24\1\155\3\24"+
    "\25\0\2\24\3\0\10\24\1\0\22\24\1\156\5\24"+
    "\25\0\2\24\3\0\10\24\1\0\20\24\1\157\1\160"+
    "\6\24\25\0\2\24\3\0\10\24\1\0\10\24\1\161"+
    "\5\24\1\162\11\24\25\0\2\24\3\0\10\24\1\0"+
    "\17\24\1\163\1\24\1\164\1\165\5\24\25\0\2\24"+
    "\3\0\10\24\1\0\4\24\1\166\23\24\25\0\2\24"+
    "\3\0\10\24\1\0\1\167\17\24\1\170\7\24\25\0"+
    "\2\24\3\0\10\24\1\0\10\24\1\171\17\24\25\0"+
    "\2\24\3\0\10\24\1\0\14\24\1\172\13\24\25\0"+
    "\2\24\3\0\10\24\1\0\23\24\1\173\4\24\25\0"+
    "\2\24\3\0\10\24\1\0\20\24\1\174\7\24\25\0"+
    "\2\24\3\0\10\24\1\0\10\24\1\175\17\24\2\0"+
    "\2\123\1\124\1\123\1\125\10\123\1\176\55\123\15\177"+
    "\1\200\57\177\1\124\12\177\1\200\55\177\15\0\1\127"+
    "\4\0\1\3\73\0\2\24\3\0\10\24\1\201\30\24"+
    "\25\0\2\24\3\0\10\24\1\0\10\24\1\202\17\24"+
    "\25\0\2\24\3\0\10\24\1\0\13\24\1\203\14\24"+
    "\25\0\2\24\3\0\10\24\1\0\1\204\27\24\25\0"+
    "\2\24\3\0\10\24\1\0\22\24\1\205\5\24\25\0"+
    "\2\24\3\0\10\24\1\0\4\24\1\206\23\24\25\0"+
    "\2\24\3\0\10\24\1\0\16\24\1\207\11\24\25\0"+
    "\2\24\3\0\10\24\1\0\21\24\1\210\6\24\25\0"+
    "\2\24\3\0\10\24\1\0\10\24\1\211\17\24\25\0"+
    "\2\24\3\0\10\24\1\0\20\24\1\212\7\24\25\0"+
    "\2\24\3\0\10\24\1\0\22\24\1\213\5\24\25\0"+
    "\2\24\3\0\10\24\1\0\4\24\1\214\23\24\25\0"+
    "\2\24\3\0\10\24\1\0\21\24\1\215\6\24\25\0"+
    "\2\24\3\0\10\24\1\0\2\24\1\216\25\24\25\0"+
    "\2\24\3\0\10\24\1\0\21\24\1\217\6\24\25\0"+
    "\2\24\3\0\10\24\1\0\17\24\1\220\10\24\25\0"+
    "\2\24\3\0\10\24\1\0\16\24\1\221\11\24\25\0"+
    "\2\24\3\0\10\24\1\0\4\24\1\222\23\24\25\0"+
    "\2\24\3\0\10\24\1\0\22\24\1\223\5\24\25\0"+
    "\2\24\3\0\10\24\1\0\10\24\1\224\17\24\25\0"+
    "\2\24\3\0\10\24\1\0\15\24\1\225\12\24\25\0"+
    "\2\24\3\0\10\24\1\0\26\24\1\226\1\24\25\0"+
    "\2\24\3\0\10\24\1\0\4\24\1\227\23\24\25\0"+
    "\2\24\3\0\10\24\1\0\22\24\1\230\5\24\25\0"+
    "\2\24\3\0\10\24\1\0\23\24\1\231\4\24\25\0"+
    "\2\24\3\0\10\24\1\0\1\232\27\24\25\0\2\24"+
    "\3\0\10\24\1\0\20\24\1\233\1\24\1\234\5\24"+
    "\25\0\2\24\3\0\10\24\1\0\10\24\1\235\17\24"+
    "\25\0\2\24\3\0\10\24\1\0\22\24\1\236\5\24"+
    "\25\0\2\24\3\0\10\24\1\0\17\24\1\237\10\24"+
    "\25\0\2\24\3\0\10\24\1\0\4\24\1\240\23\24"+
    "\25\0\2\24\3\0\10\24\1\0\13\24\1\241\14\24"+
    "\2\0\2\123\1\124\1\123\1\125\10\123\1\176\4\123"+
    "\1\53\50\123\15\177\1\200\4\177\1\3\50\177\37\0"+
    "\1\242\56\0\2\24\3\0\10\24\1\0\15\24\1\243"+
    "\12\24\25\0\2\24\3\0\10\24\1\0\4\24\1\244"+
    "\23\24\25\0\2\24\3\0\10\24\1\0\12\24\1\245"+
    "\15\24\25\0\2\24\3\0\10\24\1\0\16\24\1\246"+
    "\11\24\25\0\2\24\3\0\10\24\1\0\20\24\1\247"+
    "\7\24\25\0\2\24\3\0\10\24\1\0\16\24\1\250"+
    "\3\24\1\251\5\24\25\0\2\24\3\0\10\24\1\0"+
    "\14\24\1\252\13\24\25\0\2\24\3\0\10\24\1\0"+
    "\4\24\1\234\23\24\25\0\2\24\3\0\10\24\1\0"+
    "\1\253\27\24\25\0\2\24\3\0\10\24\1\0\10\24"+
    "\1\254\17\24\25\0\2\24\3\0\10\24\1\0\4\24"+
    "\1\255\23\24\25\0\2\24\3\0\10\24\1\0\22\24"+
    "\1\256\5\24\25\0\2\24\3\0\10\24\1\0\22\24"+
    "\1\257\5\24\25\0\2\24\3\0\10\24\1\0\20\24"+
    "\1\131\7\24\25\0\2\24\3\0\10\24\1\260\30\24"+
    "\25\0\2\24\3\0\10\24\1\0\22\24\1\261\5\24"+
    "\25\0\2\24\3\0\10\24\1\0\22\24\1\262\5\24"+
    "\25\0\2\24\3\0\10\24\1\0\10\24\1\263\17\24"+
    "\25\0\2\24\3\0\10\24\1\0\1\264\27\24\25\0"+
    "\2\24\3\0\10\24\1\0\1\265\27\24\25\0\2\24"+
    "\3\0\10\24\1\0\20\24\1\266\7\24\25\0\2\24"+
    "\3\0\10\24\1\0\12\24\1\267\15\24\25\0\2\24"+
    "\3\0\10\24\1\0\22\24\1\270\5\24\25\0\2\24"+
    "\3\0\10\24\1\0\4\24\1\247\23\24\25\0\2\24"+
    "\3\0\10\24\1\0\15\24\1\271\12\24\25\0\2\24"+
    "\3\0\10\24\1\0\2\24\1\272\25\24\25\0\2\24"+
    "\3\0\10\24\1\0\4\24\1\273\23\24\25\0\2\24"+
    "\3\0\10\24\1\0\4\24\1\274\23\24\37\0\1\275"+
    "\60\0\2\24\3\0\10\24\1\0\1\276\27\24\25\0"+
    "\2\24\3\0\10\24\1\0\15\24\1\131\12\24\25\0"+
    "\2\24\3\0\10\24\1\0\13\24\1\277\14\24\25\0"+
    "\2\24\3\0\10\24\1\0\1\300\27\24\25\0\2\24"+
    "\3\0\10\24\1\0\15\24\1\301\12\24\25\0\2\24"+
    "\3\0\10\24\1\0\5\24\1\302\22\24\25\0\2\24"+
    "\3\0\10\24\1\0\10\24\1\303\17\24\25\0\2\24"+
    "\3\0\10\24\1\0\10\24\1\304\17\24\26\0\1\305"+
    "\71\0\2\24\3\0\10\24\1\0\10\24\1\306\17\24"+
    "\25\0\2\24\3\0\10\24\1\0\14\24\1\307\13\24"+
    "\25\0\2\24\3\0\10\24\1\0\22\24\1\310\5\24"+
    "\25\0\2\24\3\0\10\24\1\0\20\24\1\311\7\24"+
    "\25\0\2\24\3\0\10\24\1\0\15\24\1\312\12\24"+
    "\25\0\2\24\3\0\10\24\1\0\4\24\1\221\23\24"+
    "\25\0\2\24\3\0\10\24\1\0\6\24\1\151\21\24"+
    "\25\0\2\24\3\0\10\24\1\0\7\24\1\313\20\24"+
    "\25\0\2\24\3\0\10\24\1\0\20\24\1\314\7\24"+
    "\33\0\1\315\64\0\2\24\3\0\10\24\1\0\15\24"+
    "\1\151\12\24\25\0\2\24\3\0\10\24\1\0\4\24"+
    "\1\316\23\24\25\0\2\24\3\0\10\24\1\0\13\24"+
    "\1\151\14\24\25\0\2\24\3\0\10\24\1\0\2\24"+
    "\1\234\25\24\25\0\2\24\3\0\10\24\1\0\16\24"+
    "\1\317\11\24\25\0\2\24\3\0\10\24\1\0\2\24"+
    "\1\320\25\24\25\0\2\24\3\0\10\24\1\0\16\24"+
    "\1\321\11\24\25\0\2\24\3\0\10\24\1\0\10\24"+
    "\1\322\17\24\25\0\2\24\3\0\10\24\1\0\22\24"+
    "\1\323\5\24\25\0\2\24\3\0\10\24\1\0\1\324"+
    "\27\24\25\0\2\24\3\0\10\24\1\0\15\24\1\325"+
    "\12\24\25\0\2\24\3\0\10\24\1\0\12\24\1\131"+
    "\15\24\25\0\2\24\3\0\10\24\1\0\15\24\1\247"+
    "\12\24\25\0\2\24\3\0\10\24\1\0\22\24\1\326"+
    "\5\24\25\0\2\24\3\0\10\24\1\0\22\24\1\327"+
    "\5\24\25\0\2\24\3\0\10\24\1\0\27\24\1\131"+
    "\25\0\2\24\3\0\10\24\1\0\23\24\1\330\4\24"+
    "\25\0\2\24\3\0\10\24\1\0\20\24\1\331\7\24"+
    "\25\0\2\24\3\0\10\24\1\0\4\24\1\131\23\24"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10089];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\3\1\7\11\3\1\1\11"+
    "\25\1\2\11\3\1\3\0\1\11\2\1\1\11\41\1"+
    "\1\11\1\0\47\1\3\0\40\1\1\0\15\1\1\0"+
    "\14\1\1\0\7\1\1\11\7\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_X", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 52: break;
          case 3:
            { return token(yytext(), "END_INSTRUCTION", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 4:
            { return token(yytext(), "ERROR_0", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 5:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 6:
            { return token(yytext(), "L_PARENT", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 7:
            { return token(yytext(), "R_PARENT", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 8:
            { return token(yytext(), "MULTI", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 9:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 10:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 11:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 12:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 13:
            { return token(yytext(), "DIV", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 14:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 15:
            { return token(yytext(), "OP_RELACIONAL", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 16:
            { return token(yytext(), "OP_ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 17:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 18:
            { return token(yytext(), "L_LLAVE", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 19:
            { return token(yytext(), "R_LLAVE", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 20:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 21:
            { return token(yytext(), "DO_ESTRUCT", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 22:
            { return token(yytext(), "IF_CONDICIONAL", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 23:
            { return token(yytext(), "OP_LOGICO_OR", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 24:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 25:
            { return token(yytext(), "NUMERO_REAL", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 26:
            { return token(yytext(), "TIPO_PUERTO", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 27:
            { return token(yytext(), "OP_LOGICO_AND", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 28:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 29:
            { return token(yytext(), "OP_LOGICO_NOT", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 30:
            { return token(yytext(), "VARIABLE", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 31:
            { return token(yytext(), "CASE_ESTRUCT", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 32:
            { return token(yytext(), "LOOP", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 33:
            { return token(yytext(), "MOVE_FM", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 34:
            { return token(yytext(), "VERDADERO", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 35:
            { return token(yytext(), "BEGIN", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 36:
            { return token(yytext(), "BREAK_PR", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 37:
            { return token(yytext(), "METODO_SENSOR", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 38:
            { return token(yytext(), "CONSTANTE", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 39:
            { return token(yytext(), "FALSO", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 40:
            { return token(yytext(), "PRINT_PR", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 41:
            { return token(yytext(), "START_FM", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 42:
            { return token(yytext(), "WHILE_ESTRUCT", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 43:
            { return token(yytext(), "ELSE_IF_CONDICIONAL", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 44:
            { return token(yytext(), "PUERTO", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 45:
            { return token(yytext(), "FOR_ESTRUCT", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 46:
            { return token(yytext(), "RETURN_PR", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 47:
            { return token(yytext(), "SWITCH_ESTRUCT", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 48:
            { return token(yytext(), "CONSOLA", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 49:
            { return token(yytext(), "RESTART_FM", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 50:
            { return token(yytext(), "FUNCION_PR", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
